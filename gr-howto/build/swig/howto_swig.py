# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_howto_swig', [dirname(__file__)])
        except ImportError:
            import _howto_swig
            return _howto_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_howto_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _howto_swig = swig_import_helper()
    del swig_import_helper
else:
    import _howto_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
    """high_res_timer_now() -> gr::high_res_timer_type"""
    return _howto_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
    """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _howto_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
    """high_res_timer_tps() -> gr::high_res_timer_type"""
    return _howto_swig.high_res_timer_tps()

def high_res_timer_epoch():
    """high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _howto_swig.high_res_timer_epoch()
class rxbf_tx(object):
    """Proxy of C++ gr::howto::rxbf_tx class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(Fs, Fp, N):
        """make(double Fs, double Fp, int N) -> rxbf_tx_sptr"""
        return _howto_swig.rxbf_tx_make(Fs, Fp, N)

    make = staticmethod(make)
    __swig_destroy__ = _howto_swig.delete_rxbf_tx
    __del__ = lambda self: None
rxbf_tx_swigregister = _howto_swig.rxbf_tx_swigregister
rxbf_tx_swigregister(rxbf_tx)

def rxbf_tx_make(Fs, Fp, N):
    """rxbf_tx_make(double Fs, double Fp, int N) -> rxbf_tx_sptr"""
    return _howto_swig.rxbf_tx_make(Fs, Fp, N)

class rxbf_tx_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::howto::rxbf_tx)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::howto::rxbf_tx)> self) -> rxbf_tx_sptr
        __init__(boost::shared_ptr<(gr::howto::rxbf_tx)> self, rxbf_tx p) -> rxbf_tx_sptr
        """
        this = _howto_swig.new_rxbf_tx_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(rxbf_tx_sptr self) -> rxbf_tx"""
        return _howto_swig.rxbf_tx_sptr___deref__(self)

    __swig_destroy__ = _howto_swig.delete_rxbf_tx_sptr
    __del__ = lambda self: None

    def make(self, Fs, Fp, N):
        """make(rxbf_tx_sptr self, double Fs, double Fp, int N) -> rxbf_tx_sptr"""
        return _howto_swig.rxbf_tx_sptr_make(self, Fs, Fp, N)


    def history(self):
        """history(rxbf_tx_sptr self) -> unsigned int"""
        return _howto_swig.rxbf_tx_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(rxbf_tx_sptr self, int which, int delay)
        declare_sample_delay(rxbf_tx_sptr self, unsigned int delay)
        """
        return _howto_swig.rxbf_tx_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(rxbf_tx_sptr self, int which) -> unsigned int"""
        return _howto_swig.rxbf_tx_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(rxbf_tx_sptr self) -> int"""
        return _howto_swig.rxbf_tx_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(rxbf_tx_sptr self) -> double"""
        return _howto_swig.rxbf_tx_sptr_relative_rate(self)


    def start(self):
        """start(rxbf_tx_sptr self) -> bool"""
        return _howto_swig.rxbf_tx_sptr_start(self)


    def stop(self):
        """stop(rxbf_tx_sptr self) -> bool"""
        return _howto_swig.rxbf_tx_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(rxbf_tx_sptr self, unsigned int which_input) -> uint64_t"""
        return _howto_swig.rxbf_tx_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(rxbf_tx_sptr self, unsigned int which_output) -> uint64_t"""
        return _howto_swig.rxbf_tx_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(rxbf_tx_sptr self) -> int"""
        return _howto_swig.rxbf_tx_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(rxbf_tx_sptr self, int m)"""
        return _howto_swig.rxbf_tx_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(rxbf_tx_sptr self)"""
        return _howto_swig.rxbf_tx_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(rxbf_tx_sptr self) -> bool"""
        return _howto_swig.rxbf_tx_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(rxbf_tx_sptr self, int m)"""
        return _howto_swig.rxbf_tx_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(rxbf_tx_sptr self) -> int"""
        return _howto_swig.rxbf_tx_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(rxbf_tx_sptr self, int i) -> long"""
        return _howto_swig.rxbf_tx_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(rxbf_tx_sptr self, long max_output_buffer)
        set_max_output_buffer(rxbf_tx_sptr self, int port, long max_output_buffer)
        """
        return _howto_swig.rxbf_tx_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(rxbf_tx_sptr self, int i) -> long"""
        return _howto_swig.rxbf_tx_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(rxbf_tx_sptr self, long min_output_buffer)
        set_min_output_buffer(rxbf_tx_sptr self, int port, long min_output_buffer)
        """
        return _howto_swig.rxbf_tx_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(rxbf_tx_sptr self) -> float"""
        return _howto_swig.rxbf_tx_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(rxbf_tx_sptr self) -> float"""
        return _howto_swig.rxbf_tx_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(rxbf_tx_sptr self) -> float"""
        return _howto_swig.rxbf_tx_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(rxbf_tx_sptr self) -> float"""
        return _howto_swig.rxbf_tx_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(rxbf_tx_sptr self) -> float"""
        return _howto_swig.rxbf_tx_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(rxbf_tx_sptr self) -> float"""
        return _howto_swig.rxbf_tx_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(rxbf_tx_sptr self, int which) -> float
        pc_input_buffers_full(rxbf_tx_sptr self) -> pmt_vector_float
        """
        return _howto_swig.rxbf_tx_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(rxbf_tx_sptr self, int which) -> float
        pc_input_buffers_full_avg(rxbf_tx_sptr self) -> pmt_vector_float
        """
        return _howto_swig.rxbf_tx_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(rxbf_tx_sptr self, int which) -> float
        pc_input_buffers_full_var(rxbf_tx_sptr self) -> pmt_vector_float
        """
        return _howto_swig.rxbf_tx_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(rxbf_tx_sptr self, int which) -> float
        pc_output_buffers_full(rxbf_tx_sptr self) -> pmt_vector_float
        """
        return _howto_swig.rxbf_tx_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(rxbf_tx_sptr self, int which) -> float
        pc_output_buffers_full_avg(rxbf_tx_sptr self) -> pmt_vector_float
        """
        return _howto_swig.rxbf_tx_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(rxbf_tx_sptr self, int which) -> float
        pc_output_buffers_full_var(rxbf_tx_sptr self) -> pmt_vector_float
        """
        return _howto_swig.rxbf_tx_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(rxbf_tx_sptr self) -> float"""
        return _howto_swig.rxbf_tx_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(rxbf_tx_sptr self) -> float"""
        return _howto_swig.rxbf_tx_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(rxbf_tx_sptr self) -> float"""
        return _howto_swig.rxbf_tx_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(rxbf_tx_sptr self) -> float"""
        return _howto_swig.rxbf_tx_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(rxbf_tx_sptr self) -> float"""
        return _howto_swig.rxbf_tx_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(rxbf_tx_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _howto_swig.rxbf_tx_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(rxbf_tx_sptr self)"""
        return _howto_swig.rxbf_tx_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(rxbf_tx_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _howto_swig.rxbf_tx_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(rxbf_tx_sptr self) -> int"""
        return _howto_swig.rxbf_tx_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(rxbf_tx_sptr self) -> int"""
        return _howto_swig.rxbf_tx_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(rxbf_tx_sptr self, int priority) -> int"""
        return _howto_swig.rxbf_tx_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(rxbf_tx_sptr self) -> std::string"""
        return _howto_swig.rxbf_tx_sptr_name(self)


    def symbol_name(self):
        """symbol_name(rxbf_tx_sptr self) -> std::string"""
        return _howto_swig.rxbf_tx_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(rxbf_tx_sptr self) -> io_signature_sptr"""
        return _howto_swig.rxbf_tx_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(rxbf_tx_sptr self) -> io_signature_sptr"""
        return _howto_swig.rxbf_tx_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(rxbf_tx_sptr self) -> long"""
        return _howto_swig.rxbf_tx_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(rxbf_tx_sptr self) -> basic_block_sptr"""
        return _howto_swig.rxbf_tx_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(rxbf_tx_sptr self, int ninputs, int noutputs) -> bool"""
        return _howto_swig.rxbf_tx_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(rxbf_tx_sptr self) -> std::string"""
        return _howto_swig.rxbf_tx_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(rxbf_tx_sptr self, std::string name)"""
        return _howto_swig.rxbf_tx_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(rxbf_tx_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _howto_swig.rxbf_tx_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(rxbf_tx_sptr self) -> swig_int_ptr"""
        return _howto_swig.rxbf_tx_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(rxbf_tx_sptr self) -> swig_int_ptr"""
        return _howto_swig.rxbf_tx_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(rxbf_tx_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _howto_swig.rxbf_tx_sptr_message_subscribers(self, which_port)

rxbf_tx_sptr_swigregister = _howto_swig.rxbf_tx_sptr_swigregister
rxbf_tx_sptr_swigregister(rxbf_tx_sptr)


rxbf_tx_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
rxbf_tx = rxbf_tx.make;

class rx_bf_gen_fb(object):
    """Proxy of C++ gr::howto::rx_bf_gen_fb class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(sampling_rate, treshold, decim_factor, nbr_samples_packet, nbr_samples_cycle, delay_security_factor, time_delay):
        """make(double sampling_rate, double treshold, int decim_factor, int nbr_samples_packet, int nbr_samples_cycle, double delay_security_factor, double time_delay) -> rx_bf_gen_fb_sptr"""
        return _howto_swig.rx_bf_gen_fb_make(sampling_rate, treshold, decim_factor, nbr_samples_packet, nbr_samples_cycle, delay_security_factor, time_delay)

    make = staticmethod(make)
    __swig_destroy__ = _howto_swig.delete_rx_bf_gen_fb
    __del__ = lambda self: None
rx_bf_gen_fb_swigregister = _howto_swig.rx_bf_gen_fb_swigregister
rx_bf_gen_fb_swigregister(rx_bf_gen_fb)

def rx_bf_gen_fb_make(sampling_rate, treshold, decim_factor, nbr_samples_packet, nbr_samples_cycle, delay_security_factor, time_delay):
    """rx_bf_gen_fb_make(double sampling_rate, double treshold, int decim_factor, int nbr_samples_packet, int nbr_samples_cycle, double delay_security_factor, double time_delay) -> rx_bf_gen_fb_sptr"""
    return _howto_swig.rx_bf_gen_fb_make(sampling_rate, treshold, decim_factor, nbr_samples_packet, nbr_samples_cycle, delay_security_factor, time_delay)

class rx_bf_gen_fb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::howto::rx_bf_gen_fb)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::howto::rx_bf_gen_fb)> self) -> rx_bf_gen_fb_sptr
        __init__(boost::shared_ptr<(gr::howto::rx_bf_gen_fb)> self, rx_bf_gen_fb p) -> rx_bf_gen_fb_sptr
        """
        this = _howto_swig.new_rx_bf_gen_fb_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(rx_bf_gen_fb_sptr self) -> rx_bf_gen_fb"""
        return _howto_swig.rx_bf_gen_fb_sptr___deref__(self)

    __swig_destroy__ = _howto_swig.delete_rx_bf_gen_fb_sptr
    __del__ = lambda self: None

    def make(self, sampling_rate, treshold, decim_factor, nbr_samples_packet, nbr_samples_cycle, delay_security_factor, time_delay):
        """make(rx_bf_gen_fb_sptr self, double sampling_rate, double treshold, int decim_factor, int nbr_samples_packet, int nbr_samples_cycle, double delay_security_factor, double time_delay) -> rx_bf_gen_fb_sptr"""
        return _howto_swig.rx_bf_gen_fb_sptr_make(self, sampling_rate, treshold, decim_factor, nbr_samples_packet, nbr_samples_cycle, delay_security_factor, time_delay)


    def history(self):
        """history(rx_bf_gen_fb_sptr self) -> unsigned int"""
        return _howto_swig.rx_bf_gen_fb_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(rx_bf_gen_fb_sptr self, int which, int delay)
        declare_sample_delay(rx_bf_gen_fb_sptr self, unsigned int delay)
        """
        return _howto_swig.rx_bf_gen_fb_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(rx_bf_gen_fb_sptr self, int which) -> unsigned int"""
        return _howto_swig.rx_bf_gen_fb_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(rx_bf_gen_fb_sptr self) -> int"""
        return _howto_swig.rx_bf_gen_fb_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(rx_bf_gen_fb_sptr self) -> double"""
        return _howto_swig.rx_bf_gen_fb_sptr_relative_rate(self)


    def start(self):
        """start(rx_bf_gen_fb_sptr self) -> bool"""
        return _howto_swig.rx_bf_gen_fb_sptr_start(self)


    def stop(self):
        """stop(rx_bf_gen_fb_sptr self) -> bool"""
        return _howto_swig.rx_bf_gen_fb_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(rx_bf_gen_fb_sptr self, unsigned int which_input) -> uint64_t"""
        return _howto_swig.rx_bf_gen_fb_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(rx_bf_gen_fb_sptr self, unsigned int which_output) -> uint64_t"""
        return _howto_swig.rx_bf_gen_fb_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(rx_bf_gen_fb_sptr self) -> int"""
        return _howto_swig.rx_bf_gen_fb_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(rx_bf_gen_fb_sptr self, int m)"""
        return _howto_swig.rx_bf_gen_fb_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(rx_bf_gen_fb_sptr self)"""
        return _howto_swig.rx_bf_gen_fb_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(rx_bf_gen_fb_sptr self) -> bool"""
        return _howto_swig.rx_bf_gen_fb_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(rx_bf_gen_fb_sptr self, int m)"""
        return _howto_swig.rx_bf_gen_fb_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(rx_bf_gen_fb_sptr self) -> int"""
        return _howto_swig.rx_bf_gen_fb_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(rx_bf_gen_fb_sptr self, int i) -> long"""
        return _howto_swig.rx_bf_gen_fb_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(rx_bf_gen_fb_sptr self, long max_output_buffer)
        set_max_output_buffer(rx_bf_gen_fb_sptr self, int port, long max_output_buffer)
        """
        return _howto_swig.rx_bf_gen_fb_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(rx_bf_gen_fb_sptr self, int i) -> long"""
        return _howto_swig.rx_bf_gen_fb_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(rx_bf_gen_fb_sptr self, long min_output_buffer)
        set_min_output_buffer(rx_bf_gen_fb_sptr self, int port, long min_output_buffer)
        """
        return _howto_swig.rx_bf_gen_fb_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(rx_bf_gen_fb_sptr self) -> float"""
        return _howto_swig.rx_bf_gen_fb_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(rx_bf_gen_fb_sptr self) -> float"""
        return _howto_swig.rx_bf_gen_fb_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(rx_bf_gen_fb_sptr self) -> float"""
        return _howto_swig.rx_bf_gen_fb_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(rx_bf_gen_fb_sptr self) -> float"""
        return _howto_swig.rx_bf_gen_fb_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(rx_bf_gen_fb_sptr self) -> float"""
        return _howto_swig.rx_bf_gen_fb_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(rx_bf_gen_fb_sptr self) -> float"""
        return _howto_swig.rx_bf_gen_fb_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(rx_bf_gen_fb_sptr self, int which) -> float
        pc_input_buffers_full(rx_bf_gen_fb_sptr self) -> pmt_vector_float
        """
        return _howto_swig.rx_bf_gen_fb_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(rx_bf_gen_fb_sptr self, int which) -> float
        pc_input_buffers_full_avg(rx_bf_gen_fb_sptr self) -> pmt_vector_float
        """
        return _howto_swig.rx_bf_gen_fb_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(rx_bf_gen_fb_sptr self, int which) -> float
        pc_input_buffers_full_var(rx_bf_gen_fb_sptr self) -> pmt_vector_float
        """
        return _howto_swig.rx_bf_gen_fb_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(rx_bf_gen_fb_sptr self, int which) -> float
        pc_output_buffers_full(rx_bf_gen_fb_sptr self) -> pmt_vector_float
        """
        return _howto_swig.rx_bf_gen_fb_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(rx_bf_gen_fb_sptr self, int which) -> float
        pc_output_buffers_full_avg(rx_bf_gen_fb_sptr self) -> pmt_vector_float
        """
        return _howto_swig.rx_bf_gen_fb_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(rx_bf_gen_fb_sptr self, int which) -> float
        pc_output_buffers_full_var(rx_bf_gen_fb_sptr self) -> pmt_vector_float
        """
        return _howto_swig.rx_bf_gen_fb_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(rx_bf_gen_fb_sptr self) -> float"""
        return _howto_swig.rx_bf_gen_fb_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(rx_bf_gen_fb_sptr self) -> float"""
        return _howto_swig.rx_bf_gen_fb_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(rx_bf_gen_fb_sptr self) -> float"""
        return _howto_swig.rx_bf_gen_fb_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(rx_bf_gen_fb_sptr self) -> float"""
        return _howto_swig.rx_bf_gen_fb_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(rx_bf_gen_fb_sptr self) -> float"""
        return _howto_swig.rx_bf_gen_fb_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(rx_bf_gen_fb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _howto_swig.rx_bf_gen_fb_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(rx_bf_gen_fb_sptr self)"""
        return _howto_swig.rx_bf_gen_fb_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(rx_bf_gen_fb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _howto_swig.rx_bf_gen_fb_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(rx_bf_gen_fb_sptr self) -> int"""
        return _howto_swig.rx_bf_gen_fb_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(rx_bf_gen_fb_sptr self) -> int"""
        return _howto_swig.rx_bf_gen_fb_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(rx_bf_gen_fb_sptr self, int priority) -> int"""
        return _howto_swig.rx_bf_gen_fb_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(rx_bf_gen_fb_sptr self) -> std::string"""
        return _howto_swig.rx_bf_gen_fb_sptr_name(self)


    def symbol_name(self):
        """symbol_name(rx_bf_gen_fb_sptr self) -> std::string"""
        return _howto_swig.rx_bf_gen_fb_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(rx_bf_gen_fb_sptr self) -> io_signature_sptr"""
        return _howto_swig.rx_bf_gen_fb_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(rx_bf_gen_fb_sptr self) -> io_signature_sptr"""
        return _howto_swig.rx_bf_gen_fb_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(rx_bf_gen_fb_sptr self) -> long"""
        return _howto_swig.rx_bf_gen_fb_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(rx_bf_gen_fb_sptr self) -> basic_block_sptr"""
        return _howto_swig.rx_bf_gen_fb_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(rx_bf_gen_fb_sptr self, int ninputs, int noutputs) -> bool"""
        return _howto_swig.rx_bf_gen_fb_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(rx_bf_gen_fb_sptr self) -> std::string"""
        return _howto_swig.rx_bf_gen_fb_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(rx_bf_gen_fb_sptr self, std::string name)"""
        return _howto_swig.rx_bf_gen_fb_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(rx_bf_gen_fb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _howto_swig.rx_bf_gen_fb_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(rx_bf_gen_fb_sptr self) -> swig_int_ptr"""
        return _howto_swig.rx_bf_gen_fb_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(rx_bf_gen_fb_sptr self) -> swig_int_ptr"""
        return _howto_swig.rx_bf_gen_fb_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(rx_bf_gen_fb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _howto_swig.rx_bf_gen_fb_sptr_message_subscribers(self, which_port)

rx_bf_gen_fb_sptr_swigregister = _howto_swig.rx_bf_gen_fb_sptr_swigregister
rx_bf_gen_fb_sptr_swigregister(rx_bf_gen_fb_sptr)


rx_bf_gen_fb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
rx_bf_gen_fb = rx_bf_gen_fb.make;

class relayBF(object):
    """Proxy of C++ gr::howto::relayBF class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(bf_weight):
        """make(gr_complex bf_weight) -> relayBF_sptr"""
        return _howto_swig.relayBF_make(bf_weight)

    make = staticmethod(make)
    __swig_destroy__ = _howto_swig.delete_relayBF
    __del__ = lambda self: None
relayBF_swigregister = _howto_swig.relayBF_swigregister
relayBF_swigregister(relayBF)

def relayBF_make(bf_weight):
    """relayBF_make(gr_complex bf_weight) -> relayBF_sptr"""
    return _howto_swig.relayBF_make(bf_weight)

class relayBF_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::howto::relayBF)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::howto::relayBF)> self) -> relayBF_sptr
        __init__(boost::shared_ptr<(gr::howto::relayBF)> self, relayBF p) -> relayBF_sptr
        """
        this = _howto_swig.new_relayBF_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(relayBF_sptr self) -> relayBF"""
        return _howto_swig.relayBF_sptr___deref__(self)

    __swig_destroy__ = _howto_swig.delete_relayBF_sptr
    __del__ = lambda self: None

    def make(self, bf_weight):
        """make(relayBF_sptr self, gr_complex bf_weight) -> relayBF_sptr"""
        return _howto_swig.relayBF_sptr_make(self, bf_weight)


    def history(self):
        """history(relayBF_sptr self) -> unsigned int"""
        return _howto_swig.relayBF_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(relayBF_sptr self, int which, int delay)
        declare_sample_delay(relayBF_sptr self, unsigned int delay)
        """
        return _howto_swig.relayBF_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(relayBF_sptr self, int which) -> unsigned int"""
        return _howto_swig.relayBF_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(relayBF_sptr self) -> int"""
        return _howto_swig.relayBF_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(relayBF_sptr self) -> double"""
        return _howto_swig.relayBF_sptr_relative_rate(self)


    def start(self):
        """start(relayBF_sptr self) -> bool"""
        return _howto_swig.relayBF_sptr_start(self)


    def stop(self):
        """stop(relayBF_sptr self) -> bool"""
        return _howto_swig.relayBF_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(relayBF_sptr self, unsigned int which_input) -> uint64_t"""
        return _howto_swig.relayBF_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(relayBF_sptr self, unsigned int which_output) -> uint64_t"""
        return _howto_swig.relayBF_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(relayBF_sptr self) -> int"""
        return _howto_swig.relayBF_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(relayBF_sptr self, int m)"""
        return _howto_swig.relayBF_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(relayBF_sptr self)"""
        return _howto_swig.relayBF_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(relayBF_sptr self) -> bool"""
        return _howto_swig.relayBF_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(relayBF_sptr self, int m)"""
        return _howto_swig.relayBF_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(relayBF_sptr self) -> int"""
        return _howto_swig.relayBF_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(relayBF_sptr self, int i) -> long"""
        return _howto_swig.relayBF_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(relayBF_sptr self, long max_output_buffer)
        set_max_output_buffer(relayBF_sptr self, int port, long max_output_buffer)
        """
        return _howto_swig.relayBF_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(relayBF_sptr self, int i) -> long"""
        return _howto_swig.relayBF_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(relayBF_sptr self, long min_output_buffer)
        set_min_output_buffer(relayBF_sptr self, int port, long min_output_buffer)
        """
        return _howto_swig.relayBF_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(relayBF_sptr self) -> float"""
        return _howto_swig.relayBF_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(relayBF_sptr self) -> float"""
        return _howto_swig.relayBF_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(relayBF_sptr self) -> float"""
        return _howto_swig.relayBF_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(relayBF_sptr self) -> float"""
        return _howto_swig.relayBF_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(relayBF_sptr self) -> float"""
        return _howto_swig.relayBF_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(relayBF_sptr self) -> float"""
        return _howto_swig.relayBF_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(relayBF_sptr self, int which) -> float
        pc_input_buffers_full(relayBF_sptr self) -> pmt_vector_float
        """
        return _howto_swig.relayBF_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(relayBF_sptr self, int which) -> float
        pc_input_buffers_full_avg(relayBF_sptr self) -> pmt_vector_float
        """
        return _howto_swig.relayBF_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(relayBF_sptr self, int which) -> float
        pc_input_buffers_full_var(relayBF_sptr self) -> pmt_vector_float
        """
        return _howto_swig.relayBF_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(relayBF_sptr self, int which) -> float
        pc_output_buffers_full(relayBF_sptr self) -> pmt_vector_float
        """
        return _howto_swig.relayBF_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(relayBF_sptr self, int which) -> float
        pc_output_buffers_full_avg(relayBF_sptr self) -> pmt_vector_float
        """
        return _howto_swig.relayBF_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(relayBF_sptr self, int which) -> float
        pc_output_buffers_full_var(relayBF_sptr self) -> pmt_vector_float
        """
        return _howto_swig.relayBF_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(relayBF_sptr self) -> float"""
        return _howto_swig.relayBF_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(relayBF_sptr self) -> float"""
        return _howto_swig.relayBF_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(relayBF_sptr self) -> float"""
        return _howto_swig.relayBF_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(relayBF_sptr self) -> float"""
        return _howto_swig.relayBF_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(relayBF_sptr self) -> float"""
        return _howto_swig.relayBF_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(relayBF_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _howto_swig.relayBF_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(relayBF_sptr self)"""
        return _howto_swig.relayBF_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(relayBF_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _howto_swig.relayBF_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(relayBF_sptr self) -> int"""
        return _howto_swig.relayBF_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(relayBF_sptr self) -> int"""
        return _howto_swig.relayBF_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(relayBF_sptr self, int priority) -> int"""
        return _howto_swig.relayBF_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(relayBF_sptr self) -> std::string"""
        return _howto_swig.relayBF_sptr_name(self)


    def symbol_name(self):
        """symbol_name(relayBF_sptr self) -> std::string"""
        return _howto_swig.relayBF_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(relayBF_sptr self) -> io_signature_sptr"""
        return _howto_swig.relayBF_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(relayBF_sptr self) -> io_signature_sptr"""
        return _howto_swig.relayBF_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(relayBF_sptr self) -> long"""
        return _howto_swig.relayBF_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(relayBF_sptr self) -> basic_block_sptr"""
        return _howto_swig.relayBF_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(relayBF_sptr self, int ninputs, int noutputs) -> bool"""
        return _howto_swig.relayBF_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(relayBF_sptr self) -> std::string"""
        return _howto_swig.relayBF_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(relayBF_sptr self, std::string name)"""
        return _howto_swig.relayBF_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(relayBF_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _howto_swig.relayBF_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(relayBF_sptr self) -> swig_int_ptr"""
        return _howto_swig.relayBF_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(relayBF_sptr self) -> swig_int_ptr"""
        return _howto_swig.relayBF_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(relayBF_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _howto_swig.relayBF_sptr_message_subscribers(self, which_port)

relayBF_sptr_swigregister = _howto_swig.relayBF_sptr_swigregister
relayBF_sptr_swigregister(relayBF_sptr)


relayBF_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
relayBF = relayBF.make;

class randphpert(object):
    """Proxy of C++ gr::howto::randphpert class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(random_perturbation_size, bf_flag):
        """make(double random_perturbation_size, int bf_flag) -> randphpert_sptr"""
        return _howto_swig.randphpert_make(random_perturbation_size, bf_flag)

    make = staticmethod(make)

    def poll_complex_gain(self):
        """poll_complex_gain(randphpert self) -> gr_complex"""
        return _howto_swig.randphpert_poll_complex_gain(self)


    def bf_flag(self):
        """bf_flag(randphpert self) -> int"""
        return _howto_swig.randphpert_bf_flag(self)

    __swig_destroy__ = _howto_swig.delete_randphpert
    __del__ = lambda self: None
randphpert_swigregister = _howto_swig.randphpert_swigregister
randphpert_swigregister(randphpert)

def randphpert_make(random_perturbation_size, bf_flag):
    """randphpert_make(double random_perturbation_size, int bf_flag) -> randphpert_sptr"""
    return _howto_swig.randphpert_make(random_perturbation_size, bf_flag)

class randphpert_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::howto::randphpert)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::howto::randphpert)> self) -> randphpert_sptr
        __init__(boost::shared_ptr<(gr::howto::randphpert)> self, randphpert p) -> randphpert_sptr
        """
        this = _howto_swig.new_randphpert_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(randphpert_sptr self) -> randphpert"""
        return _howto_swig.randphpert_sptr___deref__(self)

    __swig_destroy__ = _howto_swig.delete_randphpert_sptr
    __del__ = lambda self: None

    def make(self, random_perturbation_size, bf_flag):
        """make(randphpert_sptr self, double random_perturbation_size, int bf_flag) -> randphpert_sptr"""
        return _howto_swig.randphpert_sptr_make(self, random_perturbation_size, bf_flag)


    def poll_complex_gain(self):
        """poll_complex_gain(randphpert_sptr self) -> gr_complex"""
        return _howto_swig.randphpert_sptr_poll_complex_gain(self)


    def bf_flag(self):
        """bf_flag(randphpert_sptr self) -> int"""
        return _howto_swig.randphpert_sptr_bf_flag(self)


    def history(self):
        """history(randphpert_sptr self) -> unsigned int"""
        return _howto_swig.randphpert_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(randphpert_sptr self, int which, int delay)
        declare_sample_delay(randphpert_sptr self, unsigned int delay)
        """
        return _howto_swig.randphpert_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(randphpert_sptr self, int which) -> unsigned int"""
        return _howto_swig.randphpert_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(randphpert_sptr self) -> int"""
        return _howto_swig.randphpert_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(randphpert_sptr self) -> double"""
        return _howto_swig.randphpert_sptr_relative_rate(self)


    def start(self):
        """start(randphpert_sptr self) -> bool"""
        return _howto_swig.randphpert_sptr_start(self)


    def stop(self):
        """stop(randphpert_sptr self) -> bool"""
        return _howto_swig.randphpert_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(randphpert_sptr self, unsigned int which_input) -> uint64_t"""
        return _howto_swig.randphpert_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(randphpert_sptr self, unsigned int which_output) -> uint64_t"""
        return _howto_swig.randphpert_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(randphpert_sptr self) -> int"""
        return _howto_swig.randphpert_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(randphpert_sptr self, int m)"""
        return _howto_swig.randphpert_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(randphpert_sptr self)"""
        return _howto_swig.randphpert_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(randphpert_sptr self) -> bool"""
        return _howto_swig.randphpert_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(randphpert_sptr self, int m)"""
        return _howto_swig.randphpert_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(randphpert_sptr self) -> int"""
        return _howto_swig.randphpert_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(randphpert_sptr self, int i) -> long"""
        return _howto_swig.randphpert_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(randphpert_sptr self, long max_output_buffer)
        set_max_output_buffer(randphpert_sptr self, int port, long max_output_buffer)
        """
        return _howto_swig.randphpert_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(randphpert_sptr self, int i) -> long"""
        return _howto_swig.randphpert_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(randphpert_sptr self, long min_output_buffer)
        set_min_output_buffer(randphpert_sptr self, int port, long min_output_buffer)
        """
        return _howto_swig.randphpert_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(randphpert_sptr self) -> float"""
        return _howto_swig.randphpert_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(randphpert_sptr self) -> float"""
        return _howto_swig.randphpert_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(randphpert_sptr self) -> float"""
        return _howto_swig.randphpert_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(randphpert_sptr self) -> float"""
        return _howto_swig.randphpert_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(randphpert_sptr self) -> float"""
        return _howto_swig.randphpert_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(randphpert_sptr self) -> float"""
        return _howto_swig.randphpert_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(randphpert_sptr self, int which) -> float
        pc_input_buffers_full(randphpert_sptr self) -> pmt_vector_float
        """
        return _howto_swig.randphpert_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(randphpert_sptr self, int which) -> float
        pc_input_buffers_full_avg(randphpert_sptr self) -> pmt_vector_float
        """
        return _howto_swig.randphpert_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(randphpert_sptr self, int which) -> float
        pc_input_buffers_full_var(randphpert_sptr self) -> pmt_vector_float
        """
        return _howto_swig.randphpert_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(randphpert_sptr self, int which) -> float
        pc_output_buffers_full(randphpert_sptr self) -> pmt_vector_float
        """
        return _howto_swig.randphpert_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(randphpert_sptr self, int which) -> float
        pc_output_buffers_full_avg(randphpert_sptr self) -> pmt_vector_float
        """
        return _howto_swig.randphpert_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(randphpert_sptr self, int which) -> float
        pc_output_buffers_full_var(randphpert_sptr self) -> pmt_vector_float
        """
        return _howto_swig.randphpert_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(randphpert_sptr self) -> float"""
        return _howto_swig.randphpert_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(randphpert_sptr self) -> float"""
        return _howto_swig.randphpert_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(randphpert_sptr self) -> float"""
        return _howto_swig.randphpert_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(randphpert_sptr self) -> float"""
        return _howto_swig.randphpert_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(randphpert_sptr self) -> float"""
        return _howto_swig.randphpert_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(randphpert_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _howto_swig.randphpert_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(randphpert_sptr self)"""
        return _howto_swig.randphpert_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(randphpert_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _howto_swig.randphpert_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(randphpert_sptr self) -> int"""
        return _howto_swig.randphpert_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(randphpert_sptr self) -> int"""
        return _howto_swig.randphpert_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(randphpert_sptr self, int priority) -> int"""
        return _howto_swig.randphpert_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(randphpert_sptr self) -> std::string"""
        return _howto_swig.randphpert_sptr_name(self)


    def symbol_name(self):
        """symbol_name(randphpert_sptr self) -> std::string"""
        return _howto_swig.randphpert_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(randphpert_sptr self) -> io_signature_sptr"""
        return _howto_swig.randphpert_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(randphpert_sptr self) -> io_signature_sptr"""
        return _howto_swig.randphpert_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(randphpert_sptr self) -> long"""
        return _howto_swig.randphpert_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(randphpert_sptr self) -> basic_block_sptr"""
        return _howto_swig.randphpert_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(randphpert_sptr self, int ninputs, int noutputs) -> bool"""
        return _howto_swig.randphpert_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(randphpert_sptr self) -> std::string"""
        return _howto_swig.randphpert_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(randphpert_sptr self, std::string name)"""
        return _howto_swig.randphpert_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(randphpert_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _howto_swig.randphpert_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(randphpert_sptr self) -> swig_int_ptr"""
        return _howto_swig.randphpert_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(randphpert_sptr self) -> swig_int_ptr"""
        return _howto_swig.randphpert_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(randphpert_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _howto_swig.randphpert_sptr_message_subscribers(self, which_port)

randphpert_sptr_swigregister = _howto_swig.randphpert_sptr_swigregister
randphpert_sptr_swigregister(randphpert_sptr)


randphpert_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
randphpert = randphpert.make;

class forward_block(object):
    """Proxy of C++ gr::howto::forward_block class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(sample_rate, rx_min_treshold, rx_max_treshold, time_delay, time_cycle, packet_length, max_missed_symbols, nbr_zeros_per_burst):
        """make(double sample_rate, double rx_min_treshold, double rx_max_treshold, double time_delay, double time_cycle, int packet_length, int max_missed_symbols, int nbr_zeros_per_burst) -> forward_block_sptr"""
        return _howto_swig.forward_block_make(sample_rate, rx_min_treshold, rx_max_treshold, time_delay, time_cycle, packet_length, max_missed_symbols, nbr_zeros_per_burst)

    make = staticmethod(make)
    __swig_destroy__ = _howto_swig.delete_forward_block
    __del__ = lambda self: None
forward_block_swigregister = _howto_swig.forward_block_swigregister
forward_block_swigregister(forward_block)

def forward_block_make(sample_rate, rx_min_treshold, rx_max_treshold, time_delay, time_cycle, packet_length, max_missed_symbols, nbr_zeros_per_burst):
    """forward_block_make(double sample_rate, double rx_min_treshold, double rx_max_treshold, double time_delay, double time_cycle, int packet_length, int max_missed_symbols, int nbr_zeros_per_burst) -> forward_block_sptr"""
    return _howto_swig.forward_block_make(sample_rate, rx_min_treshold, rx_max_treshold, time_delay, time_cycle, packet_length, max_missed_symbols, nbr_zeros_per_burst)

class forward_block_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::howto::forward_block)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::howto::forward_block)> self) -> forward_block_sptr
        __init__(boost::shared_ptr<(gr::howto::forward_block)> self, forward_block p) -> forward_block_sptr
        """
        this = _howto_swig.new_forward_block_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(forward_block_sptr self) -> forward_block"""
        return _howto_swig.forward_block_sptr___deref__(self)

    __swig_destroy__ = _howto_swig.delete_forward_block_sptr
    __del__ = lambda self: None

    def make(self, sample_rate, rx_min_treshold, rx_max_treshold, time_delay, time_cycle, packet_length, max_missed_symbols, nbr_zeros_per_burst):
        """make(forward_block_sptr self, double sample_rate, double rx_min_treshold, double rx_max_treshold, double time_delay, double time_cycle, int packet_length, int max_missed_symbols, int nbr_zeros_per_burst) -> forward_block_sptr"""
        return _howto_swig.forward_block_sptr_make(self, sample_rate, rx_min_treshold, rx_max_treshold, time_delay, time_cycle, packet_length, max_missed_symbols, nbr_zeros_per_burst)


    def history(self):
        """history(forward_block_sptr self) -> unsigned int"""
        return _howto_swig.forward_block_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(forward_block_sptr self, int which, int delay)
        declare_sample_delay(forward_block_sptr self, unsigned int delay)
        """
        return _howto_swig.forward_block_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(forward_block_sptr self, int which) -> unsigned int"""
        return _howto_swig.forward_block_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(forward_block_sptr self) -> int"""
        return _howto_swig.forward_block_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(forward_block_sptr self) -> double"""
        return _howto_swig.forward_block_sptr_relative_rate(self)


    def start(self):
        """start(forward_block_sptr self) -> bool"""
        return _howto_swig.forward_block_sptr_start(self)


    def stop(self):
        """stop(forward_block_sptr self) -> bool"""
        return _howto_swig.forward_block_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(forward_block_sptr self, unsigned int which_input) -> uint64_t"""
        return _howto_swig.forward_block_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(forward_block_sptr self, unsigned int which_output) -> uint64_t"""
        return _howto_swig.forward_block_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(forward_block_sptr self) -> int"""
        return _howto_swig.forward_block_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(forward_block_sptr self, int m)"""
        return _howto_swig.forward_block_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(forward_block_sptr self)"""
        return _howto_swig.forward_block_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(forward_block_sptr self) -> bool"""
        return _howto_swig.forward_block_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(forward_block_sptr self, int m)"""
        return _howto_swig.forward_block_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(forward_block_sptr self) -> int"""
        return _howto_swig.forward_block_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(forward_block_sptr self, int i) -> long"""
        return _howto_swig.forward_block_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(forward_block_sptr self, long max_output_buffer)
        set_max_output_buffer(forward_block_sptr self, int port, long max_output_buffer)
        """
        return _howto_swig.forward_block_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(forward_block_sptr self, int i) -> long"""
        return _howto_swig.forward_block_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(forward_block_sptr self, long min_output_buffer)
        set_min_output_buffer(forward_block_sptr self, int port, long min_output_buffer)
        """
        return _howto_swig.forward_block_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(forward_block_sptr self) -> float"""
        return _howto_swig.forward_block_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(forward_block_sptr self) -> float"""
        return _howto_swig.forward_block_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(forward_block_sptr self) -> float"""
        return _howto_swig.forward_block_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(forward_block_sptr self) -> float"""
        return _howto_swig.forward_block_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(forward_block_sptr self) -> float"""
        return _howto_swig.forward_block_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(forward_block_sptr self) -> float"""
        return _howto_swig.forward_block_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(forward_block_sptr self, int which) -> float
        pc_input_buffers_full(forward_block_sptr self) -> pmt_vector_float
        """
        return _howto_swig.forward_block_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(forward_block_sptr self, int which) -> float
        pc_input_buffers_full_avg(forward_block_sptr self) -> pmt_vector_float
        """
        return _howto_swig.forward_block_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(forward_block_sptr self, int which) -> float
        pc_input_buffers_full_var(forward_block_sptr self) -> pmt_vector_float
        """
        return _howto_swig.forward_block_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(forward_block_sptr self, int which) -> float
        pc_output_buffers_full(forward_block_sptr self) -> pmt_vector_float
        """
        return _howto_swig.forward_block_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(forward_block_sptr self, int which) -> float
        pc_output_buffers_full_avg(forward_block_sptr self) -> pmt_vector_float
        """
        return _howto_swig.forward_block_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(forward_block_sptr self, int which) -> float
        pc_output_buffers_full_var(forward_block_sptr self) -> pmt_vector_float
        """
        return _howto_swig.forward_block_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(forward_block_sptr self) -> float"""
        return _howto_swig.forward_block_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(forward_block_sptr self) -> float"""
        return _howto_swig.forward_block_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(forward_block_sptr self) -> float"""
        return _howto_swig.forward_block_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(forward_block_sptr self) -> float"""
        return _howto_swig.forward_block_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(forward_block_sptr self) -> float"""
        return _howto_swig.forward_block_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(forward_block_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _howto_swig.forward_block_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(forward_block_sptr self)"""
        return _howto_swig.forward_block_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(forward_block_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _howto_swig.forward_block_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(forward_block_sptr self) -> int"""
        return _howto_swig.forward_block_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(forward_block_sptr self) -> int"""
        return _howto_swig.forward_block_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(forward_block_sptr self, int priority) -> int"""
        return _howto_swig.forward_block_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(forward_block_sptr self) -> std::string"""
        return _howto_swig.forward_block_sptr_name(self)


    def symbol_name(self):
        """symbol_name(forward_block_sptr self) -> std::string"""
        return _howto_swig.forward_block_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(forward_block_sptr self) -> io_signature_sptr"""
        return _howto_swig.forward_block_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(forward_block_sptr self) -> io_signature_sptr"""
        return _howto_swig.forward_block_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(forward_block_sptr self) -> long"""
        return _howto_swig.forward_block_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(forward_block_sptr self) -> basic_block_sptr"""
        return _howto_swig.forward_block_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(forward_block_sptr self, int ninputs, int noutputs) -> bool"""
        return _howto_swig.forward_block_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(forward_block_sptr self) -> std::string"""
        return _howto_swig.forward_block_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(forward_block_sptr self, std::string name)"""
        return _howto_swig.forward_block_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(forward_block_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _howto_swig.forward_block_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(forward_block_sptr self) -> swig_int_ptr"""
        return _howto_swig.forward_block_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(forward_block_sptr self) -> swig_int_ptr"""
        return _howto_swig.forward_block_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(forward_block_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _howto_swig.forward_block_sptr_message_subscribers(self, which_port)

forward_block_sptr_swigregister = _howto_swig.forward_block_sptr_swigregister
forward_block_sptr_swigregister(forward_block_sptr)


forward_block_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
forward_block = forward_block.make;

class random_ph_pert(object):
    """Proxy of C++ gr::howto::random_ph_pert class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(random_perturbation_size, bf_flag):
        """make(double random_perturbation_size, int bf_flag) -> random_ph_pert_sptr"""
        return _howto_swig.random_ph_pert_make(random_perturbation_size, bf_flag)

    make = staticmethod(make)

    def poll_complex_gain(self):
        """poll_complex_gain(random_ph_pert self) -> gr_complex"""
        return _howto_swig.random_ph_pert_poll_complex_gain(self)


    def bf_flag(self):
        """bf_flag(random_ph_pert self) -> int"""
        return _howto_swig.random_ph_pert_bf_flag(self)

    __swig_destroy__ = _howto_swig.delete_random_ph_pert
    __del__ = lambda self: None
random_ph_pert_swigregister = _howto_swig.random_ph_pert_swigregister
random_ph_pert_swigregister(random_ph_pert)

def random_ph_pert_make(random_perturbation_size, bf_flag):
    """random_ph_pert_make(double random_perturbation_size, int bf_flag) -> random_ph_pert_sptr"""
    return _howto_swig.random_ph_pert_make(random_perturbation_size, bf_flag)

class random_ph_pert_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::howto::random_ph_pert)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::howto::random_ph_pert)> self) -> random_ph_pert_sptr
        __init__(boost::shared_ptr<(gr::howto::random_ph_pert)> self, random_ph_pert p) -> random_ph_pert_sptr
        """
        this = _howto_swig.new_random_ph_pert_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(random_ph_pert_sptr self) -> random_ph_pert"""
        return _howto_swig.random_ph_pert_sptr___deref__(self)

    __swig_destroy__ = _howto_swig.delete_random_ph_pert_sptr
    __del__ = lambda self: None

    def make(self, random_perturbation_size, bf_flag):
        """make(random_ph_pert_sptr self, double random_perturbation_size, int bf_flag) -> random_ph_pert_sptr"""
        return _howto_swig.random_ph_pert_sptr_make(self, random_perturbation_size, bf_flag)


    def poll_complex_gain(self):
        """poll_complex_gain(random_ph_pert_sptr self) -> gr_complex"""
        return _howto_swig.random_ph_pert_sptr_poll_complex_gain(self)


    def bf_flag(self):
        """bf_flag(random_ph_pert_sptr self) -> int"""
        return _howto_swig.random_ph_pert_sptr_bf_flag(self)


    def history(self):
        """history(random_ph_pert_sptr self) -> unsigned int"""
        return _howto_swig.random_ph_pert_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(random_ph_pert_sptr self, int which, int delay)
        declare_sample_delay(random_ph_pert_sptr self, unsigned int delay)
        """
        return _howto_swig.random_ph_pert_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(random_ph_pert_sptr self, int which) -> unsigned int"""
        return _howto_swig.random_ph_pert_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(random_ph_pert_sptr self) -> int"""
        return _howto_swig.random_ph_pert_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(random_ph_pert_sptr self) -> double"""
        return _howto_swig.random_ph_pert_sptr_relative_rate(self)


    def start(self):
        """start(random_ph_pert_sptr self) -> bool"""
        return _howto_swig.random_ph_pert_sptr_start(self)


    def stop(self):
        """stop(random_ph_pert_sptr self) -> bool"""
        return _howto_swig.random_ph_pert_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(random_ph_pert_sptr self, unsigned int which_input) -> uint64_t"""
        return _howto_swig.random_ph_pert_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(random_ph_pert_sptr self, unsigned int which_output) -> uint64_t"""
        return _howto_swig.random_ph_pert_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(random_ph_pert_sptr self) -> int"""
        return _howto_swig.random_ph_pert_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(random_ph_pert_sptr self, int m)"""
        return _howto_swig.random_ph_pert_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(random_ph_pert_sptr self)"""
        return _howto_swig.random_ph_pert_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(random_ph_pert_sptr self) -> bool"""
        return _howto_swig.random_ph_pert_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(random_ph_pert_sptr self, int m)"""
        return _howto_swig.random_ph_pert_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(random_ph_pert_sptr self) -> int"""
        return _howto_swig.random_ph_pert_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(random_ph_pert_sptr self, int i) -> long"""
        return _howto_swig.random_ph_pert_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(random_ph_pert_sptr self, long max_output_buffer)
        set_max_output_buffer(random_ph_pert_sptr self, int port, long max_output_buffer)
        """
        return _howto_swig.random_ph_pert_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(random_ph_pert_sptr self, int i) -> long"""
        return _howto_swig.random_ph_pert_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(random_ph_pert_sptr self, long min_output_buffer)
        set_min_output_buffer(random_ph_pert_sptr self, int port, long min_output_buffer)
        """
        return _howto_swig.random_ph_pert_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(random_ph_pert_sptr self) -> float"""
        return _howto_swig.random_ph_pert_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(random_ph_pert_sptr self) -> float"""
        return _howto_swig.random_ph_pert_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(random_ph_pert_sptr self) -> float"""
        return _howto_swig.random_ph_pert_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(random_ph_pert_sptr self) -> float"""
        return _howto_swig.random_ph_pert_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(random_ph_pert_sptr self) -> float"""
        return _howto_swig.random_ph_pert_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(random_ph_pert_sptr self) -> float"""
        return _howto_swig.random_ph_pert_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(random_ph_pert_sptr self, int which) -> float
        pc_input_buffers_full(random_ph_pert_sptr self) -> pmt_vector_float
        """
        return _howto_swig.random_ph_pert_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(random_ph_pert_sptr self, int which) -> float
        pc_input_buffers_full_avg(random_ph_pert_sptr self) -> pmt_vector_float
        """
        return _howto_swig.random_ph_pert_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(random_ph_pert_sptr self, int which) -> float
        pc_input_buffers_full_var(random_ph_pert_sptr self) -> pmt_vector_float
        """
        return _howto_swig.random_ph_pert_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(random_ph_pert_sptr self, int which) -> float
        pc_output_buffers_full(random_ph_pert_sptr self) -> pmt_vector_float
        """
        return _howto_swig.random_ph_pert_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(random_ph_pert_sptr self, int which) -> float
        pc_output_buffers_full_avg(random_ph_pert_sptr self) -> pmt_vector_float
        """
        return _howto_swig.random_ph_pert_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(random_ph_pert_sptr self, int which) -> float
        pc_output_buffers_full_var(random_ph_pert_sptr self) -> pmt_vector_float
        """
        return _howto_swig.random_ph_pert_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(random_ph_pert_sptr self) -> float"""
        return _howto_swig.random_ph_pert_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(random_ph_pert_sptr self) -> float"""
        return _howto_swig.random_ph_pert_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(random_ph_pert_sptr self) -> float"""
        return _howto_swig.random_ph_pert_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(random_ph_pert_sptr self) -> float"""
        return _howto_swig.random_ph_pert_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(random_ph_pert_sptr self) -> float"""
        return _howto_swig.random_ph_pert_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(random_ph_pert_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _howto_swig.random_ph_pert_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(random_ph_pert_sptr self)"""
        return _howto_swig.random_ph_pert_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(random_ph_pert_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _howto_swig.random_ph_pert_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(random_ph_pert_sptr self) -> int"""
        return _howto_swig.random_ph_pert_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(random_ph_pert_sptr self) -> int"""
        return _howto_swig.random_ph_pert_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(random_ph_pert_sptr self, int priority) -> int"""
        return _howto_swig.random_ph_pert_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(random_ph_pert_sptr self) -> std::string"""
        return _howto_swig.random_ph_pert_sptr_name(self)


    def symbol_name(self):
        """symbol_name(random_ph_pert_sptr self) -> std::string"""
        return _howto_swig.random_ph_pert_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(random_ph_pert_sptr self) -> io_signature_sptr"""
        return _howto_swig.random_ph_pert_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(random_ph_pert_sptr self) -> io_signature_sptr"""
        return _howto_swig.random_ph_pert_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(random_ph_pert_sptr self) -> long"""
        return _howto_swig.random_ph_pert_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(random_ph_pert_sptr self) -> basic_block_sptr"""
        return _howto_swig.random_ph_pert_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(random_ph_pert_sptr self, int ninputs, int noutputs) -> bool"""
        return _howto_swig.random_ph_pert_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(random_ph_pert_sptr self) -> std::string"""
        return _howto_swig.random_ph_pert_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(random_ph_pert_sptr self, std::string name)"""
        return _howto_swig.random_ph_pert_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(random_ph_pert_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _howto_swig.random_ph_pert_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(random_ph_pert_sptr self) -> swig_int_ptr"""
        return _howto_swig.random_ph_pert_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(random_ph_pert_sptr self) -> swig_int_ptr"""
        return _howto_swig.random_ph_pert_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(random_ph_pert_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _howto_swig.random_ph_pert_sptr_message_subscribers(self, which_port)

random_ph_pert_sptr_swigregister = _howto_swig.random_ph_pert_sptr_swigregister
random_ph_pert_sptr_swigregister(random_ph_pert_sptr)


random_ph_pert_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
random_ph_pert = random_ph_pert.make;



